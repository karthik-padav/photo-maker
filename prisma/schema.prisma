datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(uuid())
  name          String?
  username      String?         @unique
  email         String?         
  emailVerified DateTime?
  image         String?
  accounts      Account[]       @relation(onDelete:Cascade)
  images        Image[]         @relation(onDelete:Cascade)
  controlers    Controler[]     @relation(onDelete:Cascade)
  sessions      Session[]       @relation(onDelete:Cascade)
  credit        Int             @default(100)
  isActive      Boolean         @default(true)
  // Optional for WebAuthn support
  Authenticator Authenticator[] @relation(onDelete:Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
 
model Account {
  id                       String  @id @default(uuid())
  userId                   String  
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Image {
  id                       String       @id @default(uuid())
  userId                   String
  bucket                   String
  imagePath                String
  isActive                 Boolean      @default(true)
  user                     User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  controlers               Controler[]  @relation(onDelete:Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())    @updatedAt
 
  @@index([userId])
}
 
model Controler {
  id                       String     @id @default(uuid())
  userId                   String?
  imageId                  String? 
  bucket                   String?
  borderTitle              String?
  borderValue              String?
  imageWrapperSize         String?
  rotate                   String?
  scale                    String?
  pngShadow                String?
  transformX               String?
  transformY               String?
  pngBorderColor           String?
  outerBorderColor         String?
  outerBorderOpacity       String?
  outerBorderWidth         String?
  backgroundScale          String?
  backgroundColorType      String?
  backgroundColor          String?
  backgroundImagePath      String?
  backgroundRotate         String?
  downloadedImagePath      String?
  isActive                 Boolean    @default(true)
  user                     User?      @relation(fields: [userId], references: [id], onDelete:Cascade)
  image                    Image?     @relation(fields: [imageId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())  @updatedAt
 
  @@index([userId])
}
 
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  id           String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}